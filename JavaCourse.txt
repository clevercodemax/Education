Изучение Java - курс лекций (краткое содержание)

01. Лекция --> Циклы и переменные.
02. Лекция --> Сеттер и геттер, конструктор.
03. Лекция --> Инкапсуляция (сжатие кода), наследование, полиморфизм, абстрактный класс.
04. Лекция --> Базовые классы (строка, дата и т.д.), работа с окнами.
05. Лекция --> Исключения, описания ошибок. Сборка проектов (Maven, Gradle).
06. Лекция --> Создание и использование java-архива, использование зависимостей Maven.
07. Лекция --> Интерфейс, Класс и Алгоритмы (Collections). Потоки. Запись/Чтение.
08. Лекция --> XML-стандарт. Запись объектов в файл и обратно. Парсинг.
09. Лекция --> Интерфейсы. Рефлекшен. Вызов методов из других классов. Аннотации.
10. Лекция --> Взаимодействие по сети (Прием/Отправка). GIT репозиторий.
11. Лекция --> Взаимодействие по сети (Прием/Отправка). Map. Пропертис. Ресурсы.
12. Лекция --> Многопоточность. Runnable. Callable.
13. Лекция --> Многопоточность. Synchronized. Thread-safe. Java Memory Model.
14. Лекция --> CycleBarrier. Writer/Readers. GIT наконец-то вводный вариант. 
15. Лекция --> GIT. Pro Git (1st 2009) = book.
16. Лекция --> Базы данных. PostgreSQL. CRUD - Create, Read, Update, Delete.
17. Лекция --> Взаимодействие PostgreSQL <<>> Java. 
18. Лекция --> Связка по ключам. Write/Read. Транзакции (Commit & Rollback). Начало Web.
19. Лекция --> Web = Tomcat 9. Тестовая JSP.
20. Лекция --> Скриплеты. Тэги. JSTL. Session. Cookie.




1. Обработка информации 

Цикл 
1. Написать текст программы
2. Компиляция текста 
3. Тестировать программистом - автоматически
4. хранение кода - git, svn, cvs
5. запуск


Java Virtual Machine - java.exe
.java - > .class
JIT - создает код на лету для процессора

1. Примитивные
2. Классы - структуры

HEAP - JVM создает объекты классов

4 уровня защиты в языке java:
Перечислим эти способы - режимы доступа
1. private - только внутри класса 
2. <default> / <internal> - доступ из любого класса в этом же пакете
3. protected - внутри класса, внутри пакета и подклассов
4. public - внутри класса, внутри пакета, подклассов и везде

set/get - сеттер и геттер

collection framework
1. Набор интерфейсов
2. Набор классов
3. Набор алгоритмов

Collection
- add
- size
- remove
- contains
- list
	- index = упорядоченный список, как добавили, так и храниться (жесткие позиции)
- set 
	- unique = всегда различные объекты в этом множестве 

1. Пользователь на сайте заполняет заявление
2. Отправляет в систему 
3. Система записывает заявку в базу данных
4. Выводит сообщение "Ожидайте ответа на вашу заявку. Спасибо".

Периодически система запускает процесс
1. Получить список необработанных заявок
2. Система проводит проверку - ГРН, ЗАГС, Студенты
3. Записать в базу результат.
4. Отправить почту и записать, что отправлено.

1. Надо возвращать объект (класс)
2. Класс
	- использовать один класс и заставить все чекеры его использовать
	public class CheckerAnswer {
		private boolean result;
		private String message;
	}
	- описать интерфейс 
	public interface CheckerAnswer {
		boolean getResult();
		String getMessage();
	}

Различные виды записи данных
1. Диск
2. Сеть
3. Память

1. Потоки ввода/вывода
2. Сочетание потоков
3. Типы потоков
	- Byte - Stream - InputStream/OutputStream
	- Char - Reader/Writer
	
SGML - Standart Generalized Markup Language - 1986
<family>
<person type=husband>
	<surname>Петров</surname>
	<givenname>Алексей</givenname>
</person>
</family>

HTML - Hyper Text Markup Language
WML - Wireless Markup Language (для мобильных телефонов)

XML - eXtensible Markup Language
1. Well-formed все открытые теги закрыты
2.1 DTD - Document Type Definition
2.2 XSD - Xml Skin Definition 

SAX - Simple API for XML
1. Stream Processing
2. DOM - Document Object Model

Info1 - file1 -> Info2 - file2

XPath - язык для разбора xml-дерева

Грэди Буч. Объектно-ориентированный анализ и проектирование с примерами приложений.
Грейс Хоппер. Википедия.

кнопка сцепления была на другом месте он это специально как думаете папа римский 
перемещается на 

Получить список заявок
0. FakeData
1. Из текстового файла
2. XML-файл	
	- DOM (универсальный построитель)
	- XPath
	- JAXB - Java API for XML Binding () 
3. База данных
	- SQL
	- NoSQL (Not Only SQL)
4. Внешняя система SAP, Domino

SAX - Simple Api for XML (только читает)
StAX - Stream Api for XML (пишет еще к тому же)


Reflection
==========
1. Получить информацию о классе - Class
2. Создавать объект класса
3. Работать с объектом, методами и полями через имена
4. Аннотации


Имя класс + имя метода

1. Получили класс
2. Создали объект
3. Вызвать метод по имени у объекта

Общение по сети - это мир протоколов. Прикладной программист.
Передача с одного компьютера на другой существуют некоторые компьютеры

1. IP - Internet Protocol IPv4 194.34.45.5 IPv6 
2.1 TCP - Transmission Control Protocol
2.2 UDP - UserDatagram Protocol
3.1 HTTP - Hyper Transfer Text Protocol, FTP, SMTP
3.2 SNMP - Simple Network Manage Protocol, Video/Audio

Socket = ip-address + port
Server Socket
Raw Socket 

Map - отображение / ассоциативный массив

СНИЛС -> Гражданин РФ

механизм хранения данных по ключу
да что это такое вейли лов лыжный курорт да что кисс ми да это не просто такпр
происходит надо что то менять и продолжать наращивать обороты ускоряться чтобы 
победить мне нужна победа


Поток исполнения Thread
=======================
1. создать поток Thread и старт

штука JIT позволяет код java в код машины

Инструменты:
1. Class Thread 
- создание - переопределение метода run
- запуск - метод start
- остановка через переменную (volatile)
- setDeamon
2. Interface Runnable
3. Interface ExecutorService
- Возврат результата
	- получение данных
		- Inteface Callable
	- получение исключения
- Управление пулом тредов


1. Старт тредов
- Thread
- Runnable
2. ExecutorService
- Runnable
- Callable
3. Exception


HA - High Availability

1. Producer - Consumer
2. Readers - Writers - Read/Write Lock
3. Обедающие философы


CVS - Contol Version System
SVN - Subversion
Git	- 

1. Хранить исходные коды (файлы)
2. Загружать исходые коды с сервера
3. Наложить тег
4. Создать бранч
5. Объединить

Клиент:
- закачать исходники с сервера
- залить исходники с сервера
- обновить исходники с сервера


1. tag - тег
2. brunch - бранч
3. merge - мерджинг

1. Сервер где храняться исходники http://github.com
2. Клиентское приложение

==================================
Особенности GIT
==================================
0. git init - создать локальный репозиторий
1. git status - смотреть статус
2. git add - добавить новый(ые) файл
3. git commit - закоммитить изменения в локальный репозиторий
	-m добавить комментарий сразу
	-am миновать стадию подготовки и сразу коммитить
4. git checkout <name> - вытащить последние версии файлов (указанных)
5. git log - история коммитов
6. git push - перенос коммитов в удаленный репозиторий
7. git clone - вытаскивание удаленного репозитория
8. git fetch -all вытащить из удаленного репозитория все доп.коммиты (сравнить с локальной)
9. git pull - обновить локальную версию из удаленного репозитория


git remote add origin https://github.com/clevercodemax/JavaCode.git (подключение удаленного)
git push -u origin master (отправить на удаленный репозиторий локальные коммиты)

Branches
1. git checkout -b <branch_name>  - создать новый бранч и перейти в него
2. git branch - посмотреть список бранчей
	- avv посмотреть все бранчи и сведения по ним
3. git checkout <branch_name> - переключение между бранчами
4. git merge - подтягивание изменений из указанного бранча в текущий
5. git branch -d(-D) <branch_name> - удаление бранча

Для избежания проблем и потери кода
===================================
1. Создать отдельный бранч от master
2. Вносите изменения в свой бранч
2.1. Регулярно подтягиваете изменения в master и оттуда делаете merge в свой бранч
	- git fetch --all
	Если master менялся, то:
	- git checkout master, git pull
	- git checkout <my_branch>, git merge master + решаете проблемы (no auto)
3. Вносите свои изменения из своего бранча в master
	- по сути повторить пункт 2.1
	- git checkout master
	- git merge <my_branch>

!!!! Pro Git - на русском хорошая книга !!!! 1st 2009 


one-to-one
one-to-many
many-to-many

CRUD - Create, Read, Update, Delete

INSERT INTO <table> (names colomns) values (data columns)
SELECT * FROM <table> where ...
DELETE FROM <table> where ...
UPDATE <table> set field1=value, field2=value where ...

select g.group_id, count (s.student_id), sum(s.student_id) from st_group g
left join st_student s on s.group_id = g.group_id
--where not (s.surname is null)
group by g.group_id
order by g.group_id

